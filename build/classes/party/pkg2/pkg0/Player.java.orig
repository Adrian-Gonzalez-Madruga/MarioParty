package party.pkg2.pkg0;

import DLibX.DConsole;
import java.awt.Color;
import java.awt.Font;
import jconsole.JConsole;

public class Player {

    private Board f;
    private JConsole j;
    private DConsole dc;

    private int sprite;
    private long startTime = 9;
    private long elapsedTime;
    private int previousTime = 0;
    private int printRoll;
    private int x = 18;
    private int y = 18;
    private int moveX[] = {0, 0, -1, 1};
    private int moveY[] = {-1, 1, 0, 0};
    private int direction = 0;
    private int coin = 10;
    private int star = 0;
    private int roll = 0;
    private long baseTime;
    private int turnX[] = {1, 5, 11, 18, 11, 18, 5, 11, 1, 5, 7, 11, 18, 1, 7, 18};
    private int turnY[] = {1, 1, 1, 1, 6, 6, 9, 9, 12, 12, 14, 14, 14, 17, 17, 17};
    private int number = 2;
    private boolean minus = false;
    private boolean dir[][] //[which direction change tile][directions available to go to]
            = {{false, false, false, true},
            {false, false, false, true},
            {false, true, false, true},
            {false, true, false, false},
            {false, true, false, true},
            {false, true, false, false},
            {true, true, false, false},
            {false, false, true, false},
            {true, false, false, false},
            {false, false, true, false},
            {false, false, false, true},
            {true, false, false, false},
            {false, false, true, false},
            {true, false, false, false},
            {true, false, true, false},
            {false, false, true, false}};
    private String[] name = {"mario", "luigi", "yoshi", "peach"};
    private String[] dirName = {"up", "down", "left", "right"};
    private int[] cycleChar = {1, 2, 1, 3};
    private int frame = 0, starFrame = 1, coinFrame = 1;

    public void start(Board f, JConsole j, DConsole dc, int sprite) { // I'll explain later
        this.f = f;
        this.j = j;
        this.dc = dc;
        this.sprite = sprite;
    }

    public void draw() { // keith [make the corners for keeping score and draw the players and all them shit]
        dc.drawImage("assets/animations/" + name[sprite] + "/" + dirName[direction] + "/" + cycleChar[frame % 4] + ".png", (x * 32) + 7, y * 32);

        dc.setFont(new Font("Cooper Black", Font.BOLD, 15));

        dc.drawImage("assets/misc/score card.png", 700, 100);
        dc.drawImage("assets/characters/icons/mario.png", 716, 112);
        dc.drawImage("assets/animations/star/" + starFrame + ".png", 781, 153);
        dc.drawImage("assets/animations/coin/" + coinFrame + ".png", 786, 118);
        dc.drawImage("assets/misc/1st.png", 849, 110);
        dc.drawString(coin, 810, 115);
        dc.drawString(star, 810, 155);

        starFrame++;
        coinFrame++;

        if (starFrame > 8) {
            starFrame = 1;
        }
        if (coinFrame > 4) {
            coinFrame = 1;
        }
    }

    public long startTimer() {
        startTime = System.nanoTime();
        baseTime = startTime;
        return startTime;
    }

    public long baseTimer() {
        return baseTime;
    }

    public long elapsedTimer() {
        elapsedTime = ((System.nanoTime() - baseTimer()) / 100000000) % 10;

        return elapsedTime;
    }

    public void roll() { // gareth [make a dice being rolled until player presses A(button 0?) make your drawing in this command. it's special. we will talk. get on discord]
        //  System.out.println(elapsedTimer()+"a");

        while (dc.isKeyPressed('a'));
        while (!dc.isKeyPressed('a')) {
            //while (j.isButtonPressed(1));
            //while (!j.isButtonPressed(1)) {
            dc.clear();
            if (previousTime == 8) {
                previousTime = 1;
            }
            if (elapsedTimer() >= previousTime + 1) {
                //System.out.println(startTime + "a");
                // System.out.println(elapsedTime + "b");
                if (elapsedTime == previousTime + 1) {
                    
                    previousTime += 1;
                    //System.out.println(previousTime + " and " + elapsedTimer());
                    if (minus == true) {
                       // if(number == 2){
                            minus = false;
                        //}
                        number--;
                    } else {
                       // if(number == 2){
                        minus = true;
                       // }
                        number++;
                    }
                }

                this.roll = (int) (Math.random() * 10) + 1;
                printRoll = this.roll;
                dc.clear();
                f.draw();

                draw();
                frame();
                //System.out.println(number + " aaa ");
System.out.println(number +" ssssss");
                dc.drawImage("assets/animations/die/DieRoll" + number + ".png", (x * 14), (y * 6));

                dc.redraw();
                dc.pause(100);
            }
           
        }
    }

    public int returnRoll() {
        return this.roll;
    }
    public int returnPrintRoll(){
        return printRoll;
    }
    public void drawRoll(){
            dc.drawImage("assets/animations/die/Die" + returnPrintRoll() + ".png", (x*32)-2, (y*32) -60);
        
    }

    public void move() { //kutis and adrian [get a player to move it's designated amount and turn and blah]
        if (f.getValue(x, y) != 9) { // if we are not on a turning tile
            x += moveX[direction];
            y += moveY[direction];
            roll--; // reduce the roll by 1
            return; // move then restart
        } else {
            for (int q = 0; q < turnX.length; q++) { // if a turning tile
                if (turnX[q] == x && turnY[q] == y) { // find which tile we are actually on
                    int dirnum = 0; // check if there is one or more movement choices
                    for (int e = 0; e < 4; e++) { // find how many directions we can pick from
                        if (dir[q][e]) {
                            dirnum++;
                        }
                    }
                    if (dirnum == 1) { //if you dont have to choose a direction (forced)
                        for (int e = 0; e < 4; e++) { //
                            if (dir[q][e]) {
                                direction = e;
                            }
                        }
                    } else {// if you have to choose a direction
                        boolean newdir = false;
                        while (!newdir) { // until we pick a new direction
                            for (int e = 0; e < 4; e++) {
                                if (j.isDpadPressed(e) && dir[q][e]) { //choose the direction and is available
                                    direction = e;
                                    newdir = true;
                                }
                            }
                        }
                    }
                    x += moveX[direction]; //move finally
                    y += moveY[direction];
                    break;
                }
            }
        }
    }

    public int getTile() {
        int temp = 0;
        for (int c = 0; c < 20; c++) {
            for (int v = 0; v < 20; v++) {
                if (x == v && y == c) {
                    return temp;
                }
                if (f.getValue(v, c) == 1 || f.getValue(v, c) == 2) {
                    temp++;
                }
            }
        }
        return -1;
    }

    public int getScore() { // get the score.
        return (star * 1000) + coin;
    }

    public void scorePlus(int coin) { // add coins
        this.coin += coin;
    }

    public void scorePlus(int coin, int star) { // add coins and star
        this.star += star;
        this.coin += coin;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return x;
    }

    public void frame() {
        frame++;
    }

}
